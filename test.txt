{"code": "", "language": "javascript", "url": "https://github.com/ciena-blueplanet/bunsen-core/blob/993c67e314e2b75003a1ff4c2f0cb667715562b2/src/reducer.js#L394-L399", "func_name": "", "partition": "train", "original_string": "same as code", "repo": "", "sha": "", "code_tokens": ["function", "(", "state", ",", "action", ")", "{", "return", "_", ".", "defaults", "(", "{", "isValidating", ":", "action", ".", "isValidating", ",", "lastAction", ":", "IS_VALIDATING", "}", ",", "state", ")", "}"], "docstring_tokens": ["Update", "is", "validating", "result"], "path": "src/reducer.js", "docstring": "Update is validating result\n@param {State} state - state to update\n@param {Action} action - action\n@returns {State} - updated state"}
{"code": "function addWidgetForFilter (view, filter, editModeHint) {\n  var gridster = view._widgetsGridster;\n  var row = filter.row || 1;\n  var col = filter.col || 1;\n  var sizeX = filter.size_x || 3;\n  var sizeY = filter.size_y || 3;\n\n  var el = gridster.add_widget('<div class=\"widgetOuterFrame\"></div>', sizeX, sizeY, col, row);\n  var frameView = new WidgetFrameView({\n    model: filter\n  });\n\n  // render, and render content of widget frame\n  view.renderSubview(frameView, el[0]);\n  frameView.renderContent();\n\n  // link element and view so we can:\n  // a) on remove, get to the HTMLElement from the WidgetFrameView\n  // b) on resize, get to the WidgetFrameView from the HTMLElement\n  frameView.gridsterHook = el[0];\n  $(el[0]).data('spotWidgetFrameView', frameView);\n\n  // try to initialize and render possibly present data\n  // only follow editModeHint when the widget is configured, default to true\n  var chartView = frameView.widget;\n  chartView.model.updateConfiguration();\n  if (chartView.model.isConfigured) {\n    if (!filter.isInitialized) {\n      filter.initDataFilter();\n    }\n    if (!chartView.isInitialized) {\n      chartView.initChart();\n    }\n    chartView.update();\n\n    frameView.editMode = editModeHint;\n  } else {\n    // widget is not configured, ignore editModeHint\n    // and always go to edit mode\n    frameView.editMode = true;\n  }\n\n  filter.on('newData', function () {\n    chartView.update();\n  });\n}", "language": "javascript", "url": "https://github.com/NLeSC/spot/blob/8e02b6e0b80a21a7fe5c62b48bf121c0f2b8e417/src/pages/analyze.js#L83-L128", "func_name": "addWidgetForFilter", "partition": "train", "original_string": "function addWidgetForFilter (view, filter, editModeHint) {\n  var gridster = view._widgetsGridster;\n  var row = filter.row || 1;\n  var col = filter.col || 1;\n  var sizeX = filter.size_x || 3;\n  var sizeY = filter.size_y || 3;\n\n  var el = gridster.add_widget('<div class=\"widgetOuterFrame\"></div>', sizeX, sizeY, col, row);\n  var frameView = new WidgetFrameView({\n    model: filter\n  });\n\n  // render, and render content of widget frame\n  view.renderSubview(frameView, el[0]);\n  frameView.renderContent();\n\n  // link element and view so we can:\n  // a) on remove, get to the HTMLElement from the WidgetFrameView\n  // b) on resize, get to the WidgetFrameView from the HTMLElement\n  frameView.gridsterHook = el[0];\n  $(el[0]).data('spotWidgetFrameView', frameView);\n\n  // try to initialize and render possibly present data\n  // only follow editModeHint when the widget is configured, default to true\n  var chartView = frameView.widget;\n  chartView.model.updateConfiguration();\n  if (chartView.model.isConfigured) {\n    if (!filter.isInitialized) {\n      filter.initDataFilter();\n    }\n    if (!chartView.isInitialized) {\n      chartView.initChart();\n    }\n    chartView.update();\n\n    frameView.editMode = editModeHint;\n  } else {\n    // widget is not configured, ignore editModeHint\n    // and always go to edit mode\n    frameView.editMode = true;\n  }\n\n  filter.on('newData', function () {\n    chartView.update();\n  });\n}", "repo": "NLeSC/spot", "sha": "8e02b6e0b80a21a7fe5c62b48bf121c0f2b8e417", "code_tokens": ["function", "addWidgetForFilter", "(", "view", ",", "filter", ",", "editModeHint", ")", "{", "var", "gridster", "=", "view", ".", "_widgetsGridster", ";", "var", "row", "=", "filter", ".", "row", "||", "1", ";", "var", "col", "=", "filter", ".", "col", "||", "1", ";", "var", "sizeX", "=", "filter", ".", "size_x", "||", "3", ";", "var", "sizeY", "=", "filter", ".", "size_y", "||", "3", ";", "var", "el", "=", "gridster", ".", "add_widget", "(", "'<div class=\"widgetOuterFrame\"></div>'", ",", "sizeX", ",", "sizeY", ",", "col", ",", "row", ")", ";", "var", "frameView", "=", "new", "WidgetFrameView", "(", "{", "model", ":", "filter", "}", ")", ";", "// render, and render content of widget frame", "view", ".", "renderSubview", "(", "frameView", ",", "el", "[", "0", "]", ")", ";", "frameView", ".", "renderContent", "(", ")", ";", "// link element and view so we can:", "// a) on remove, get to the HTMLElement from the WidgetFrameView", "// b) on resize, get to the WidgetFrameView from the HTMLElement", "frameView", ".", "gridsterHook", "=", "el", "[", "0", "]", ";", "$", "(", "el", "[", "0", "]", ")", ".", "data", "(", "'spotWidgetFrameView'", ",", "frameView", ")", ";", "// try to initialize and render possibly present data", "// only follow editModeHint when the widget is configured, default to true", "var", "chartView", "=", "frameView", ".", "widget", ";", "chartView", ".", "model", ".", "updateConfiguration", "(", ")", ";", "if", "(", "chartView", ".", "model", ".", "isConfigured", ")", "{", "if", "(", "!", "filter", ".", "isInitialized", ")", "{", "filter", ".", "initDataFilter", "(", ")", ";", "}", "if", "(", "!", "chartView", ".", "isInitialized", ")", "{", "chartView", ".", "initChart", "(", ")", ";", "}", "chartView", ".", "update", "(", ")", ";", "frameView", ".", "editMode", "=", "editModeHint", ";", "}", "else", "{", "// widget is not configured, ignore editModeHint", "// and always go to edit mode", "frameView", ".", "editMode", "=", "true", ";", "}", "filter", ".", "on", "(", "'newData'", ",", "function", "(", ")", "{", "chartView", ".", "update", "(", ")", ";", "}", ")", ";", "}"], "docstring_tokens": ["Add", "a", "widget", "to", "the", "analyze", "page", "for", "the", "given", "filter"], "path": "src/pages/analyze.js", "docstring": "Add a widget to the analyze page for the given filter\n\nview {View}             Ampersand View instance of the analyze page\nfilter {Filter}         Spot filter instance to create the widget for\neditModeHint {boolean}  Try to start plot in editMode (ie. accepts dnd of facets) [true] or in interaction mode (false)"}
{"code": "function inRange (value, min, max) {\n  const int = parseInt(value, 10)\n\n  return (\n    `${int}` === `${value.replace(/^0/, '')}` &&\n    int >= min &&\n    int <= max\n  )\n}", "language": "javascript", "url": "https://github.com/ciena-blueplanet/bunsen-core/blob/993c67e314e2b75003a1ff4c2f0cb667715562b2/src/validator/custom-formats/time.js#L8-L16", "func_name": "inRange", "partition": "train", "original_string": "function inRange (value, min, max) {\n  const int = parseInt(value, 10)\n\n  return (\n    `${int}` === `${value.replace(/^0/, '')}` &&\n    int >= min &&\n    int <= max\n  )\n}", "repo": "ciena-blueplanet/bunsen-core", "sha": "993c67e314e2b75003a1ff4c2f0cb667715562b2", "code_tokens": ["function", "inRange", "(", "value", ",", "min", ",", "max", ")", "{", "const", "int", "=", "parseInt", "(", "value", ",", "10", ")", "return", "(", "`", "${", "int", "}", "`", "===", "`", "${", "value", ".", "replace", "(", "/", "^0", "/", ",", "''", ")", "}", "`", "&&", "int", ">=", "min", "&&", "int", "<=", "max", ")", "}"], "docstring_tokens": ["Determine", "if", "value", "is", "within", "a", "numeric", "range"], "path": "src/validator/custom-formats/time.js", "docstring": "Determine if value is within a numeric range\n@param {String|Number} value - value to check\n@param {Number} min - start of range (inclusive)\n@param {Number} max - end of range (inclusive)\n@returns {Boolean} whether or not value is within range"}
{"code": "function markdown(options) {\n  return new Remarkable(extend({\n    breaks: false,\n    html: true,\n    langPrefix: 'lang-',\n    linkify: true,\n    typographer: false,\n    xhtmlOut: false\n  }, options));\n}", "language": "javascript", "url": "https://github.com/helpers/helper-md/blob/6bf823b4264c341903c1b85676610bb3dbe6bcc2/index.js#L108-L117", "func_name": "markdown", "partition": "train", "original_string": "function markdown(options) {\n  return new Remarkable(extend({\n    breaks: false,\n    html: true,\n    langPrefix: 'lang-',\n    linkify: true,\n    typographer: false,\n    xhtmlOut: false\n  }, options));\n}", "repo": "helpers/helper-md", "sha": "6bf823b4264c341903c1b85676610bb3dbe6bcc2", "code_tokens": ["function", "markdown", "(", "options", ")", "{", "return", "new", "Remarkable", "(", "extend", "(", "{", "breaks", ":", "false", ",", "html", ":", "true", ",", "langPrefix", ":", "'lang-'", ",", "linkify", ":", "true", ",", "typographer", ":", "false", ",", "xhtmlOut", ":", "false", "}", ",", "options", ")", ")", ";", "}"], "docstring_tokens": ["Shared", "settings", "for", "remarkable"], "path": "index.js", "docstring": "Shared settings for remarkable\n\n@param {Object} `options`\n@return {Object}\n@api private"}